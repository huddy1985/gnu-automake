## automake - create Makefile.in from Makefile.am
## Copyright (C) 1994, 1995, 1996 Free Software Foundation, Inc.

## This program is free software; you can redistribute it and/or modify
## it under the terms of the GNU General Public License as published by
## the Free Software Foundation; either version 2, or (at your option)
## any later version.

## This program is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.

## You should have received a copy of the GNU General Public License
## along with this program; if not, write to the Free Software
## Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
## 02111-1307, USA.
@PROGRAM@: $(@XPROGRAM@_OBJECTS) $(@XPROGRAM@_DEPENDENCIES)
## Remove program before linking.  Otherwise the link will fail if the
## program is running somewhere.  FIXME: this could be a loss if
## you're using an incremental linker.  Maybe we should think twice?
## Or maybe not... sadly, incremental linkers are rarer than losing
## systems.
NOTCYGWIN	@rm -f @PROGRAM@
CYGWIN	@rm -f @PROGRAM@$(EXEEXT)
	$(@XLINK@) $(@XPROGRAM@_LDFLAGS) $(@XPROGRAM@_OBJECTS) $(@XPROGRAM@_LDADD) $(LIBS)
## Why take such a funny approach to Cygwin32 executables?  Why not
## just rewrite this file to PROGRAM$(EXEEXT), and then rewrite
## foo_PROGRAMS similarly?  Because then EXTRA_PROGRAMS won't work
## correctly -- every configure.in will have to know to add $(EXEEXT)
## when putting a program name into a variable.  By doing things this
## way we can get Cygwin32 support by adding a single macro to
## configure.in and then re-running automake.
CYGWIN	@test -z "$(EXEEXT)" || echo timestamp > @PROGRAM@
